#ORIGINAL QUESTION
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#This is a generalized solution to this problem. Instead of using 4000000 as a static max value and instead of only summing even numbers,
#the program allows you to specify your own maximum value and allows you to choose between summing even/odd/all numbers of the sequence. 

fibSequence = [1, 2]
testFibNumbers = []

print("What is the maximum value you wish to use?")
max = int(input())
while True:
    print("Do you wish to sum the even numbers or the odd numbers or all of the numbers\n\
    Type \"even\" for even numbers or \"odd\" for odd numbers or \"all\" for all numbers")
    parity = input()
    if parity == "even":
        parity = 0
        break
    elif parity == "odd":
        parity = 1
        break
    elif parity == "all":
        break
    else:
        print("You entered an invalid selection")
        continue

for i in range(2,max):
    number = int(fibSequence[i-2]) + int(fibSequence[i-1])
    if number > int(max):
        break
    else:
        fibSequence.append(number)

if parity == "all":
    for i in range(0,int(len(fibSequence))):
        testFibNumbers.append(fibSequence[i])
else:
    for i in range(0,int(len(fibSequence))):
        if int(fibSequence[i])%2 == int(parity):
            testFibNumbers.append(fibSequence[i])

result = sum(testFibNumbers)
print("The sum is: " + str(result))
